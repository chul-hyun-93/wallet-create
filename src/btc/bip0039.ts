/**
 * Bitcoin Improvement Proposal 39 (BIP39)
 * 비트코인 개선 제안서 39
 * https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki
 *
 * BIP: 39
 * Layer: Applications
 * Title: 결정적 키 생성을 위한 니모닉 코드
 *
 * wordlist: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md
 *
 * ## 요약
 * 이 BIP는 결정적 지갑 생성을 위한 니모닉 코드 또는 니모닉 문장 - 기억하기 쉬운 단어들로 이루어진 그룹 - 의 구현을 설명합니다.
 * 이것은 두 부분으로 구성됩니다: 니모닉 생성과 이를 이진 시드로 변환하는 과정. 이 시드는 나중에 BIP-0032 또는 유사한 방법을 사용하여 결정적 지갑을 생성하는 데 사용될 수 있습니다.
 *
 * ### 결정적 지갑(Deterministic Wallet)
 * 하나의 시드(seed) 또는 마스터 키로부터 무수히 많은 개인 키와 공개 키를 생성할 수 있는 암호화폐 지갑입니다. 이러한 지갑은 BIP-32, BIP-39, BIP-44 등의 표준을 따르며, 사용자가 백업 및 복원을 쉽게 할 수 있게 합니다.
 *
 * ## 동기
 * 니모닉 코드나 문장은 원시 바이너리 또는 16진수 표현을 다루는 것보다 인간과의 상호 작용에 더 적합합니다. 이 문장은 종이에 쓰거나 전화로 말할 수 있습니다.
 * 이 가이드는 사람이 읽을 수 있는 전사로 컴퓨터 생성 무작위성을 전달하는 방법을 제시합니다.
 *
 * ## 니모닉 생성
 * 니모닉은 32비트의 배수로 엔트로피를 인코딩해야 합니다. 엔트로피가 많을수록 보안이 향상되지만 문장 길이가 길어집니다. 초기 엔트로피 길이를 ENT로 지칭합니다. ENT의 허용 크기는 128-256 비트입니다.
 * 먼저, ENT 비트의 초기 엔트로피가 생성됩니다. 체크섬은 SHA256 해시의 첫 번째 `ENT / 32` 비트로 생성됩니다. 이 체크섬은 초기 엔트로피 끝에 추가됩니다. 그런 다음 이 연결된 비트는 11비트 그룹으로 나뉘어 각 그룹이 0-2047 사이의 숫자를 인코딩하며, 이는 워드리스트의 인덱스로 사용됩니다. 마지막으로, 이 숫자를 단어로 변환하고 결합된 단어를 니모닉 문장으로 사용합니다.
 * 다음 표는 초기 엔트로피 길이(ENT), 체크섬 길이(CS) 및 생성된 니모닉 문장(MS)의 길이(단어 수) 간의 관계를 설명합니다.
 *
 * CS = ENT / 32
 * MS = (ENT + CS) / 11
 *
 * |  ENT  | CS | ENT+CS |  MS  |
 * +—––+––+––––+——+
 * |  128  |  4 |   132  |  12  |
 * |  160  |  5 |   165  |  15  |
 * |  192  |  6 |   198  |  18  |
 * |  224  |  7 |   231  |  21  |
 * |  256  |  8 |   264  |  24  |
 *
 * ## 워드리스트
 * 이상적인 워드리스트는 다음과 같은 특성을 가집니다:
 *
 * a) 단어의 스마트 선택
 *    - 워드리스트는 단어의 처음 네 글자만으로도 명확하게 단어를 식별할 수 있도록 작성됩니다.
 * b) 유사한 단어의 회피
 *    - "build"와 "built", "woman"과 "women", "quick"과 "quickly"와 같은 단어 쌍은 문장을 기억하기 어렵게 할 뿐만 아니라 오류가 발생하기 쉽고 추측하기 더 어렵습니다.
 * c) 정렬된 워드리스트
 *    - 워드리스트가 정렬되어 있어 코드 단어를 더 효율적으로 조회할 수 있습니다(예: 구현에서 이진 검색 대신 선형 검색을 사용할 수 있음).
 *    - 이는 더 나은 압축을 위해 접두어 트리(트라이)를 사용할 수 있게 합니다.
 *
 * 워드리스트에는 네이티브 문자가 포함될 수 있지만, 반드시 UTF-8로 Normalization Form Compatibility Decomposition(NFKD)을 사용하여 인코딩되어야 합니다.
 *
 * ## 니모닉에서 시드로 변환
 * 사용자는 니모닉을 비밀번호로 보호할 수 있습니다. 비밀번호가 없으면 빈 문자열 ""이 대신 사용됩니다.
 * 니모닉에서 이진 시드를 생성하려면 PBKDF2 함수를 사용합니다. 니모닉 문장(UTF-8 NFKD)은 비밀번호로 사용되고 문자열 "mnemonic" + 비밀번호(또한 UTF-8 NFKD)가 소금(salt)으로 사용됩니다. 반복 횟수는 2048로 설정되며 HMAC-SHA512가 의사 난수 함수로 사용됩니다. 파생 키의 길이는 512비트(= 64바이트)입니다.
 * 이 시드는 나중에 BIP-0032 또는 유사한 방법을 사용하여 결정적 지갑을 생성하는 데 사용될 수 있습니다.
 * 니모닉 문장을 이진 시드로 변환하는 것은 문장을 생성하는 것과 완전히 독립적입니다. 이는 매우 간단한 코드를 생성합니다; 문장 구조에 대한 제한이 없으며 클라이언트는 자신만의 워드리스트나 문장 생성기를 구현할 수 있어, 오타 탐지 또는 기타 목적을 위한 유연성을 제공합니다.
 * "니모닉 생성" 섹션에서 설명한 알고리즘에 의해 생성되지 않은 니모닉을 사용하는 것은 가능하지만 권장되지 않으며 소프트웨어는 워드리스트를 사용하여 니모닉 문장의 체크섬을 계산하고 유효하지 않은 경우 경고를 발행해야 합니다.
 * 설명된 방법은 또한 그럴듯한 부인성을 제공합니다. 왜냐하면 모든 비밀번호는 유효한 시드(따라서 결정적 지갑)를 생성하지만, 올바른 비밀번호만이 원하는 지갑을 사용할 수 있게 하기 때문입니다.
 *
 * ## 워드리스트
 * 대다수의 BIP39 지갑은 영어 워드리스트만 지원하므로, 니모닉 문장을 생성하기 위해 비영어 워드리스트를 사용하는 것은 **권장되지 않습니다**.
 * 그래도 여전히 애플리케이션에서 로컬라이즈된 워드리스트를 사용해야 한다고 생각한다면, 직접 워드리스트를 만들지 말고 다음 중 하나를 사용하십시오.
 *
 * * [워드리스트](https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md)
 *
 * ## 테스트 벡터
 * 테스트 벡터에는 입력 엔트로피, 니모닉 및 시드가 포함됩니다. 모든 벡터에는 비밀번호 "TREZOR"이 사용됩니다.
 *
 * [테스트 벡터 JSON](https://github.com/trezor/python-mnemonic/blob/master/vectors.json)
 * 또한 [일본어 워드리스트 테스트 JSON](https://github.com/bip32JP/bip32JP.github.io/blob/master/test_JP_BIP39.json)를 참조하십시오.
 * (강하게 정규화된 기호를 비밀번호로 사용한 일본어 워드리스트 테스트)
 *
 */

import * as bip39 from "bip39";

type Strength = 128 | 160 | 192 | 224 | 256;

/**
 * generateMnemonic: 랜덤한 니모닉 문구를 생성합니다.
 * - strength: 니모닉 문구의 강도(개수)를 설정합니다.
 * - 128: 12개 단어
 * - 160: 15개 단어
 * - 192: 18개 단어
 * - 224: 21개 단어
 * - 256: 24개 단어
 * @param strength
 */
export const generateMnemonic = async (strength: Strength) => {
  /**
   *  bip39.generateMnemonic: 랜덤한 니모닉 문구를 생성합니다.
   *
   *  상세:
   *  1. 엔트로피 생성: randomBytes 함수를 사용하여 무작위 엔트로피를 생성합니다.
   *  2. 체크섬 추가: 엔트로피의 해시 값을 체크섬으로 추가합니다.
   *  3. 비트 그룹 변환: 엔트로피와 체크섬을 11비트 그룹으로 나눕니다.
   *  4. 단어 변환: 각 11비트 그룹을 2048개 단어 목록에서 해당하는 단어로 변환합니다.
   */
  return bip39.generateMnemonic(strength);
};

/**
 * mnemonicToSeed: 니모닉 문구를 시드로 변환합니다.
 *
 * PBKDF2 함수를 사용하여 니모닉 문구를 이진 시드로 변환합니다.
 * PBKDF2(Password-Based Key Derivation Function 2)
 * 특정 Hash 함수를 salt와 함께 반복적으로 적용하여 키를 생성하는 함수입니다.
 *
 * 아래 내부 로직은 SHA512 해시 함수를 사용하여 2048회 반복하여 512비트(= 64바이트)의 파생 키를 생성합니다.
 * https://github.com/bitcoinjs/bip39/blob/a7ecbfe2e60d0214ce17163d610cad9f7b23140c/ts_src/index.ts#L46
 *
 * @param mnemonic
 * @param password
 */
export const mnemonicToSeed = async (
  mnemonic: string,
  password?: string,
): Promise<Buffer> => {
  return bip39.mnemonicToSeed(mnemonic, password);
};
